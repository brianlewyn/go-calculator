// Code generated by version 3.5.0 of the Linked List Library from github.com/brianlewyn/go-linked-list/v3

// Copyright (c) 2023, Brayan Mej√≠a. All rights reserved.
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.

package doubly

import "github.com/brianlewyn/go-calculator/internal/data"

// Node represents a node for the Doubly Linked List.
type Node struct {
	token data.Token
	prev  *Node
	next  *Node
}

// Todo: Instance Function

// NewNode returns a new instance of Node with specified data
func NewNode(token data.Token) *Node {
	return iNode(token)
}

// Todo: Getting Methods

// Token returns the data of the node
func (n Node) Token() data.Token {
	return n.token
}

// Prev returns the previous node
func (n Node) Prev() *Node {
	return n.prev
}

// Next returns the next node
func (n Node) Next() *Node {
	return n.next
}

// Todo: Setting Method

// Update updates the data of the node
func (n *Node) Update(token data.Token) {
	n.token = token
}

// !Tool Functions

func iNode(token data.Token) *Node {
	return &Node{token: token}
}

// !Tool Methods

func (n *Node) connect(node *Node) {
	n.next = node
	node.prev = n
}

func (n *Node) RemoveNode() {
	n.prev = nil
	n.next = nil
}
